{"version":3,"sources":["fps.ts","shaders.ts","index.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,QAAQ,GAAG,IAAI,IAAJ,EAAf;AACA,AEDA,ADAA,IDCI,AEDJ,ADAA,KCAA,EFCA,ACDA,CCAA,EDAA,KCAA,CAAA,CDAA,CAAA,KCAA,CAAA,GDAA,CAAA;ADEA,IAAI,MAAM,GAAG,CAAb;AEDA,ADCA,ICDA,KDCA,ICDA,GAAA,MDCA,CCDA,ADCuB,CCDvB,WAAA,ADCA,CCDA,CDC6C,UAA7C,EAA+D;ADE/D,ACDI,SDCJ,MAAA,GAAA;AACI,AEDJ,ADAI,EDCA,EEDA,EDAI,EDCE,EEDA,EDAI,CCAD,EDAI,ECAjB,KDAiB,CAAA,EAAA,CAAG,YAAH,CAAgB,UAAhB,CAAb,CAF2D,CAI3D;ADAA,AEDJ,IAAI,EFCI,EEDA,GAAG,CAAX,EFCgB,GAAG,IAAI,IAAJ,EAAf;AACA,AEDJ,ADCI,EAAA,ECDE,EFCI,GCAN,CDAU,ACAV,ECDU,ADCV,CDAa,ACAV,ECCH,EAFJ,IFCyB,CAAC,GCAtB,CAAgB,GDAH,GCAb,EDAkC,ACAV,QDAkB,CAAC,GCA3C,EAL2D,CAO3D,CDFkC,EAAlC;;AACA,AEEJ,ADAI,EAAA,IDFI,AEEF,CAAC,EDAH,CDFQ,ACER,EAAA,CCAJ,ADAO,CDFS,EEEA,EFFZ,EAAkB,MCElB,CAAiB,CCAL,KDAZ,EAR2D,CAU3D;ADHI,AEEJ,EAAA,EFFI,MEEI,CFFG,AEEF,GFFK,IAAI,CAAC,KAAL,CAAW,EEEzB,CAA0B,GFFK,GAAG,GEElC,CFFyB,CEEY,EFFI,IAA3B,GEEd,CFFiD,MAA7C;AACA,AEEJ,ADCA,IDHI,EEEE,ADCF,MDHQ,AEEA,CDCD,EDHI,AEEA,CDCD,ODHV,AEEmB,ADCT,CCDU,ADCV,EAAA,CAAG,UCDF,CAAuB,ODCxB,CAAsB,GCDrB,CAAf,EDCc,EAA8B,OAAA,CAAA,EAAA,CAAG,cAAjC,CAAd;ADFI,AEEJ,EAAA,EFFI,KEEJ,CFFU,AEEV,EAAA,CFFa,CAAT,CEEC,MAAO,CAAC,UAAR,CAAmB,OAAnB,CAAL;AFDC,ACED,MAAI,CAAC,OAAL,EAAc;ACAd,ADCI,MCDA,OAAA,CAAA,EAAA,KAAO,IAAX,EAAiB;AFDjB,AEE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","file":"src.77de5100.js","sourceRoot":"..\\src","sourcesContent":["var lastTime = new Date()\r\nvar lastFps: string\r\nvar frames = 0\r\n\r\nexport function getFPS() {\r\n    frames++\r\n    var thisTime = new Date()\r\n    const msec = thisTime.getTime() - lastTime.getTime()\r\n    if (msec >= 1000) {\r\n        lastFps = Math.round(frames * 1000 / msec) + ' fps'\r\n        lastTime = thisTime\r\n        frames = 0\r\n    }\r\n    return lastFps\r\n}","import { gl } from \"./index\";\r\n\r\nfunction compileShader(shaderSource: string, shaderType: GLuint) {\r\n    // Create the shader object\r\n    var shader = gl.createShader(shaderType)!;\r\n\r\n    // Set the shader source code.\r\n    gl.shaderSource(shader, shaderSource);\r\n\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n\r\n    // Check if it compiled\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        // Something went wrong during compilation; get the error\r\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n    // create a program.\r\n    var program = gl.createProgram()!;\r\n\r\n    // attach the shaders.\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n\r\n    // link the program.\r\n    gl.linkProgram(program);\r\n\r\n    // Check if it linked.\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        // something went wrong with the link\r\n        throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n    }\r\n\r\n    return program;\r\n};\r\n\r\nfunction createShaderFromScript(scriptId: string, opt_shaderType: GLuint) {\r\n    // look up the script tag by id.\r\n    var shaderScript = document.getElementById(scriptId) as HTMLScriptElement\r\n    if (!shaderScript) {\r\n        throw (\"*** Error: unknown script element\" + scriptId);\r\n    }\r\n\r\n    // extract the contents of the script tag.\r\n    var shaderSource = shaderScript.text;\r\n\r\n    // If we didn't pass in a type, use the 'type' from\r\n    // the script tag.\r\n    if (!opt_shaderType) {\r\n        if (shaderScript.type == \"x-shader/x-vertex\") {\r\n            opt_shaderType = gl.VERTEX_SHADER;\r\n        } else if (shaderScript.type == \"x-shader/x-fragment\") {\r\n            opt_shaderType = gl.FRAGMENT_SHADER;\r\n        } else if (!opt_shaderType) {\r\n            throw (\"*** Error: shader type not set\");\r\n        }\r\n    }\r\n\r\n    return compileShader(shaderSource, opt_shaderType);\r\n};\r\n\r\nexport function createProgramFromScripts(shaderScriptIds: string[]) {\r\n    var vertexShader = createShaderFromScript(shaderScriptIds[0], gl.VERTEX_SHADER);\r\n    var fragmentShader = createShaderFromScript(shaderScriptIds[1], gl.FRAGMENT_SHADER);\r\n    return createProgram(vertexShader, fragmentShader);\r\n}","import { getFPS } from './fps';\r\nimport { createProgramFromScripts } from './shaders'\r\n\r\nexport var gl: WebGLRenderingContext\r\nvar paused = true\r\nvar size = 1\r\nconst uniforms: {\r\n    position?: WebGLUniformLocation | null\r\n} = {}\r\n\r\nwindow.onload = () => {\r\n    document.addEventListener('keydown', onKeyDown)\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement\r\n    gl = canvas!.getContext(\"webgl\")!\r\n    if (gl === null) {\r\n        alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\")\r\n        return\r\n    }\r\n    const prog = createProgramFromScripts(['my_vertex_shader', 'my_fragment_shader'])\r\n    gl.useProgram(prog)\r\n    uniforms.position = gl.getUniformLocation(prog, 'position')\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction step() {\r\n    const fps = document.querySelector(\"#fps\") as HTMLSpanElement;\r\n    fps.textContent = getFPS()\r\n    const sizeSpan = document.querySelector(\"#size\") as HTMLSpanElement;\r\n    sizeSpan.textContent = 'Size: ' + size\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement;\r\n    resizeCanvasToDisplaySize(canvas)\r\n    gl.clearColor(0.0, 0*new Date().getMilliseconds() / 1000, 0.0, 1.0)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n    for (var i = 0; i < size; i++) {\r\n        gl.uniform2f(uniforms.position!, Math.random(), Math.random())\r\n        gl.drawArrays(gl.POINTS, 0, 1)\r\n    }\r\n    if (paused) return\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction onKeyDown(e: KeyboardEvent) {\r\n    switch (e.key) {\r\n        case ' ':\r\n            paused = !paused\r\n            const checkbox = document.querySelector(\"#paused\") as HTMLInputElement\r\n            checkbox.checked = paused\r\n            if (!paused) window.requestAnimationFrame(step)\r\n            return\r\n        case 'ArrowUp':\r\n            size *= 2\r\n            break\r\n        case 'ArrowDown':\r\n            if (size>1) size /= 2\r\n            break\r\n        default:\r\n            //console.log(e)\r\n    }\r\n    if (paused) window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize(canvas: HTMLCanvasElement) {\r\n    const dpr = window.devicePixelRatio;\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n    const displayWidth = Math.round(width * dpr);\r\n    const displayHeight = Math.round(height * dpr);\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width != displayWidth ||\r\n        canvas.height != displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n        gl.viewport(0, 0, displayWidth, displayHeight)\r\n    }\r\n\r\n    return needResize;\r\n}"]}