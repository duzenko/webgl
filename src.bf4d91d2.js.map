{"version":3,"sources":["fps.ts","shaders.ts","index.ts"],"names":[],"mappings":"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","file":"src.bf4d91d2.js","sourceRoot":"..\\src","sourcesContent":["var lastTime = new Date()\r\nvar lastFps: string\r\nvar frames = 0\r\n\r\nexport function getFPS() {\r\n    frames++\r\n    var thisTime = new Date()\r\n    const msec = thisTime.getTime() - lastTime.getTime()\r\n    if (msec >= 1000) {\r\n        lastFps = Math.round(frames * 1000 / msec) + ' fps'\r\n        lastTime = thisTime\r\n        frames = 0\r\n    }\r\n    return lastFps\r\n}","import { gl } from \"./index\";\r\n\r\nfunction compileShader(shaderSource: string, shaderType: GLuint) {\r\n    // Create the shader object\r\n    var shader = gl.createShader(shaderType)!;\r\n\r\n    // Set the shader source code.\r\n    gl.shaderSource(shader, shaderSource);\r\n\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n\r\n    // Check if it compiled\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        // Something went wrong during compilation; get the error\r\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n    // create a program.\r\n    var program = gl.createProgram()!;\r\n\r\n    // attach the shaders.\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n\r\n    // link the program.\r\n    gl.linkProgram(program);\r\n\r\n    // Check if it linked.\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        // something went wrong with the link\r\n        throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n    }\r\n\r\n    return program;\r\n};\r\n\r\nfunction createShaderFromScript(scriptId: string, opt_shaderType: GLuint) {\r\n    // look up the script tag by id.\r\n    var shaderScript = document.getElementById(scriptId) as HTMLScriptElement\r\n    if (!shaderScript) {\r\n        throw (\"*** Error: unknown script element\" + scriptId);\r\n    }\r\n\r\n    // extract the contents of the script tag.\r\n    var shaderSource = shaderScript.text\r\n    shaderSource = '#version 300 es\\n' + shaderSource\r\n\r\n    // If we didn't pass in a type, use the 'type' from\r\n    // the script tag.\r\n    if (!opt_shaderType) {\r\n        if (shaderScript.type == \"x-shader/x-vertex\") {\r\n            opt_shaderType = gl.VERTEX_SHADER;\r\n        } else if (shaderScript.type == \"x-shader/x-fragment\") {\r\n            opt_shaderType = gl.FRAGMENT_SHADER;\r\n        } else if (!opt_shaderType) {\r\n            throw (\"*** Error: shader type not set\");\r\n        }\r\n    }\r\n\r\n    return compileShader(shaderSource, opt_shaderType);\r\n};\r\n\r\nexport function createProgramFromScripts(shaderScriptIds: string[]) {\r\n    var vertexShader = createShaderFromScript(shaderScriptIds[0], gl.VERTEX_SHADER);\r\n    var fragmentShader = createShaderFromScript(shaderScriptIds[1], gl.FRAGMENT_SHADER);\r\n    return createProgram(vertexShader, fragmentShader);\r\n}","import { getFPS } from './fps';\r\nimport { createProgramFromScripts } from './shaders'\r\n\r\nexport var gl: WebGL2RenderingContext\r\nvar paused = true\r\nvar size = 2\r\nconst uniforms: {\r\n    slices?: WebGLUniformLocation\r\n} = {}\r\n\r\nwindow.onload = () => {\r\n    document.addEventListener('keydown', onKeyDown)\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement\r\n    gl = canvas!.getContext(\"webgl2\")!\r\n    if (gl === null) {\r\n        alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\")\r\n        return\r\n    }\r\n    const prog = createProgramFromScripts(['my_vertex_shader', 'my_fragment_shader'])\r\n    gl.useProgram(prog)\r\n    uniforms.slices = gl.getUniformLocation(prog, 'slices')!\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction step() {\r\n    const fps = document.querySelector(\"#fps\") as HTMLSpanElement;\r\n    fps.textContent = getFPS()\r\n    const sizeSpan = document.querySelector(\"#size\") as HTMLSpanElement;\r\n    sizeSpan.textContent = 'Size: ' + size\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement;\r\n    resizeCanvasToDisplaySize(canvas)\r\n    gl.clearColor(0.0, 0.3+0*new Date().getMilliseconds() / 1000, 0.0, 1.0)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    //for (var i = 0; i < size; i++) {\r\n        gl.uniform1f(uniforms.slices!, size)\r\n        gl.drawArraysInstanced(gl.TRIANGLE_STRIP, 0, 4, size)\r\n    //}\r\n    if (paused) return\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction onKeyDown(e: KeyboardEvent) {\r\n    switch (e.key) {\r\n        case ' ':\r\n            paused = !paused\r\n            const checkbox = document.querySelector(\"#paused\") as HTMLInputElement\r\n            checkbox.checked = paused\r\n            if (!paused) window.requestAnimationFrame(step)\r\n            return\r\n        case 'ArrowUp':\r\n            //size *= 2\r\n            size++\r\n            break\r\n        case 'ArrowDown':\r\n            //if (size>1) size /= 2\r\n            if (size>1) size--\r\n            break\r\n        default:\r\n            //console.log(e)\r\n    }\r\n    if (paused) window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize(canvas: HTMLCanvasElement) {\r\n    const dpr = window.devicePixelRatio;\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n    const displayWidth = Math.round(width * dpr);\r\n    const displayHeight = Math.round(height * dpr);\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width != displayWidth ||\r\n        canvas.height != displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n        gl.viewport(0, 0, displayWidth, displayHeight)\r\n    }\r\n\r\n    return needResize;\r\n}"]}