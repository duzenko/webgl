{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA0GC,aA1GD,IAAI,EACA,GAAS,EAkBb,SAAA,IAEI,EAAG,WAAW,GAAK,IAAI,MAAO,kBAAoB,IAAM,EAAK,GAE7D,EAAG,MAAM,EAAG,kBACZ,EAAG,WAAW,EAAG,OAAQ,EAAG,GACxB,GACJ,OAAO,sBAAsB,GAGjC,SAAA,IACQ,IAAA,EAAW,SAAS,eAAe,WACvC,EAAS,EAAS,UAElB,OAAO,sBAAsB,GAGjC,SAAA,EAAuB,EAAsB,GAErC,IAAA,EAAS,EAAG,aAAa,GAUzB,GAPJ,EAAG,aAAa,EAAQ,GAGxB,EAAG,cAAc,IAGH,EAAG,mBAAmB,EAAQ,EAAG,gBAGrC,KAAA,4BAA8B,EAAG,iBAAiB,GAGrD,OAAA,EAGX,SAAA,EAAuB,EAA2B,GAE1C,IAAA,EAAU,EAAG,gBAWb,GARJ,EAAG,aAAa,EAAS,GACzB,EAAG,aAAa,EAAS,GAGzB,EAAG,YAAY,IAGD,EAAG,oBAAoB,EAAS,EAAG,aAGtC,KAAA,0BAA4B,EAAG,kBAAkB,GAGrD,OAAA,EAGX,SAAA,EAAgC,EAAkB,GAE1C,IAAA,EAAe,SAAS,eAAe,GACvC,IAAC,EACM,KAAA,oCAAsC,EAI7C,IAAA,EAAe,EAAa,KAI5B,IAAC,EACG,GAAqB,qBAArB,EAAa,KACb,EAAiB,EAAG,mBACjB,GAAyB,uBAArB,EAAa,KACpB,EAAiB,EAAG,qBACjB,IAAK,EACD,KAAA,iCAIR,OAAA,EAAc,EAAc,GAGvC,SAAA,EAAkC,GAGvB,OAAA,EAFY,EAAuB,EAAgB,GAAI,EAAG,eAC5C,EAAuB,EAAgB,GAAI,EAAG,kBArGvE,OAAO,OAAS,WACZ,SAAS,eAAe,UAAW,iBAAiB,QAAS,GACvD,IAAA,EAAS,SAAS,cAAc,aAKlC,GAAO,QAHX,EAAK,EAAQ,WAAW,UAGpB,CAIE,IAAA,EAAO,EAAyB,CAAC,mBAAoB,uBAC3D,EAAG,WAAW,GACd,OAAO,sBAAsB,QALzB,MAAM","file":"src.50a8b148.js","sourceRoot":"..\\src","sourcesContent":["var gl: WebGLRenderingContext\r\nvar paused = false\r\n\r\nwindow.onload = () => {\r\n    document.getElementById('paused')!.addEventListener('click', checkPaused)\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement;\r\n    // Initialize the GL context\r\n    gl = canvas!.getContext(\"webgl\")!;\r\n\r\n    // Only continue if WebGL is available and working\r\n    if (gl === null) {\r\n        alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n        return;\r\n    }\r\n    const prog = createProgramFromScripts(['my_vertex_shader', 'my_fragment_shader'])\r\n    gl.useProgram(prog)\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction step() {\r\n    // Set clear color to black, fully opaque\r\n    gl.clearColor(0.0, new Date().getMilliseconds() / 1000, 0.0, 1.0);\r\n    // Clear the color buffer with specified clear color\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.drawArrays(gl.POINTS, 0, 1)\r\n    if (paused) return\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction checkPaused() {\r\n    var checkbox = document.getElementById('paused') as HTMLInputElement\r\n    paused = checkbox.checked\r\n    if (paused) return\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction compileShader(shaderSource: string, shaderType: GLuint) {\r\n    // Create the shader object\r\n    var shader = gl.createShader(shaderType)!;\r\n\r\n    // Set the shader source code.\r\n    gl.shaderSource(shader, shaderSource);\r\n\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n\r\n    // Check if it compiled\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        // Something went wrong during compilation; get the error\r\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n    // create a program.\r\n    var program = gl.createProgram()!;\r\n\r\n    // attach the shaders.\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n\r\n    // link the program.\r\n    gl.linkProgram(program);\r\n\r\n    // Check if it linked.\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        // something went wrong with the link\r\n        throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n    }\r\n\r\n    return program;\r\n};\r\n\r\nfunction createShaderFromScript(scriptId: string, opt_shaderType: GLuint) {\r\n    // look up the script tag by id.\r\n    var shaderScript = document.getElementById(scriptId) as HTMLScriptElement\r\n    if (!shaderScript) {\r\n        throw (\"*** Error: unknown script element\" + scriptId);\r\n    }\r\n\r\n    // extract the contents of the script tag.\r\n    var shaderSource = shaderScript.text;\r\n\r\n    // If we didn't pass in a type, use the 'type' from\r\n    // the script tag.\r\n    if (!opt_shaderType) {\r\n        if (shaderScript.type == \"x-shader/x-vertex\") {\r\n            opt_shaderType = gl.VERTEX_SHADER;\r\n        } else if (shaderScript.type == \"x-shader/x-fragment\") {\r\n            opt_shaderType = gl.FRAGMENT_SHADER;\r\n        } else if (!opt_shaderType) {\r\n            throw (\"*** Error: shader type not set\");\r\n        }\r\n    }\r\n\r\n    return compileShader(shaderSource, opt_shaderType);\r\n};\r\n\r\nfunction createProgramFromScripts(shaderScriptIds: string[]) {\r\n    var vertexShader = createShaderFromScript(shaderScriptIds[0], gl.VERTEX_SHADER);\r\n    var fragmentShader = createShaderFromScript(shaderScriptIds[1], gl.FRAGMENT_SHADER);\r\n    return createProgram(vertexShader, fragmentShader);\r\n}"]}