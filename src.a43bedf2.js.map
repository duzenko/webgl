{"version":3,"sources":["fps.ts","shaders.ts","index.ts"],"names":[],"mappings":"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","file":"src.a43bedf2.js","sourceRoot":"..\\src","sourcesContent":["var lastTime = new Date()\r\nvar lastFps: string\r\nvar frames = 0\r\n\r\nexport function getFPS() {\r\n    frames++\r\n    var thisTime = new Date()\r\n    const msec = thisTime.getTime() - lastTime.getTime()\r\n    if (msec >= 1000) {\r\n        lastFps = Math.round(frames * 1000 / msec) + ' fps'\r\n        lastTime = thisTime\r\n        frames = 0\r\n    }\r\n    return lastFps\r\n}","import { gl } from \"./index\"\r\n\r\nfunction compileShader(shaderSource: string, shaderType: GLuint) {\r\n    // Create the shader object\r\n    var shader = gl.createShader(shaderType)!;\r\n\r\n    // Set the shader source code.\r\n    gl.shaderSource(shader, shaderSource);\r\n\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n\r\n    // Check if it compiled\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        // Something went wrong during compilation; get the error\r\n        throw gl.getShaderInfoLog(shader);\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nasync function createShaderFromScript(scriptId: string, opt_shaderType: GLuint) {\r\n    var x = await fetch(scriptId)\r\n    var shaderSource = await x.text()\r\n    try {\r\n        return compileShader(shaderSource, opt_shaderType)\r\n    } catch (e) {\r\n        console.error('compile error', scriptId, e)\r\n        return 0;\r\n    }\r\n};\r\n\r\nfunction createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n    if (!vertexShader || !fragmentShader) return\r\n\r\n    // create a program.\r\n    var program = gl.createProgram()!;\r\n\r\n    // attach the shaders.\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n\r\n    // link the program.\r\n    gl.linkProgram(program);\r\n\r\n    // Check if it linked.\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        // something went wrong with the link\r\n        console.error(\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n    }\r\n\r\n    return program;\r\n};\r\n\r\nexport async function createProgramFromScripts(shaderScriptId: string) {\r\n    var vertexShader = await createShaderFromScript(shaderScriptId+'.vert', gl.VERTEX_SHADER);\r\n    var fragmentShader = await createShaderFromScript(shaderScriptId+'.frag', gl.FRAGMENT_SHADER);\r\n    return createProgram(vertexShader, fragmentShader);\r\n}","import { getFPS } from './fps';\r\nimport { createProgramFromScripts } from './shaders'\r\n\r\nexport var gl: WebGL2RenderingContext\r\n\r\nconst torusDetail = 160;\r\n\r\nconst uniforms: {\r\n    slices?: WebGLUniformLocation\r\n    torusDetail?: WebGLUniformLocation\r\n    rotation?: WebGLUniformLocation\r\n    aspectRatio?: WebGLUniformLocation\r\n} = {}\r\n\r\nlet paused = true\r\nlet wireframe = false\r\nlet passes = 32*1\r\nlet rotation = 99*1\r\n\r\nwindow.onload = async () => {\r\n    document.addEventListener('keydown', onKeyDown)\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement\r\n    gl = canvas!.getContext(\"webgl2\")!\r\n    if (gl === null) {\r\n        alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\")\r\n        return\r\n    }\r\n    const image = new Image();\r\n    image.crossOrigin = 'anonymous'\r\n    image.src = \"https://upload.wikimedia.org/wikipedia/commons/9/9a/512x512_Dissolve_Noise_Texture.png\"\r\n    image.addEventListener('load', function () {\r\n        const texture = gl.createTexture()\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n        window.requestAnimationFrame(step)\r\n    });\r\n    createProgramFromScripts('shader').then( function(program) {\r\n        if (!program) return\r\n        gl.useProgram(program)\r\n        uniforms.slices = gl.getUniformLocation(program, 'slices')!\r\n        uniforms.torusDetail = gl.getUniformLocation(program, 'torusDetail')!\r\n        uniforms.rotation = gl.getUniformLocation(program, 'rotation')!\r\n        uniforms.aspectRatio = gl.getUniformLocation(program, 'aspectRatio')!\r\n    } )\r\n    gl.clearColor(0.3, 0.3, 0.5, 1.0)\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n}\r\n\r\nfunction step() {\r\n    const fps = document.querySelector(\"#fps\") as HTMLSpanElement\r\n    const fpsText = getFPS()\r\n    fps.textContent = paused ? 'Paused' : fpsText\r\n    const sizeSpan = document.querySelector(\"#size\") as HTMLSpanElement;\r\n    sizeSpan.textContent = 'Passes: ' + passes\r\n    const canvas = document.querySelector(\"#glCanvas\") as HTMLCanvasElement;\r\n    resizeCanvasToDisplaySize(canvas)\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n    gl.uniform1f(uniforms.slices!, passes)\r\n    gl.uniform1i(uniforms.torusDetail!, torusDetail)\r\n    gl.uniform1f(uniforms.rotation!, rotation * 1e-2)\r\n    gl.uniform1f(uniforms.aspectRatio!, canvas.width / canvas.height)\r\n    gl.drawArraysInstanced(wireframe ? gl.LINE_STRIP : gl.TRIANGLE_STRIP, 0, torusDetail * torusDetail * 6, passes + 1)\r\n    if (paused) return\r\n    window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction onKeyDown(e: KeyboardEvent) {\r\n    switch (e.key) {\r\n        case ' ':\r\n            paused = !paused\r\n            if (!paused) window.requestAnimationFrame(step)\r\n            break\r\n        case 'w':\r\n            wireframe = !wireframe;\r\n            break\r\n        case 'ArrowUp':\r\n            if(passes>0)\r\n                passes *= 2\r\n            else\r\n                passes=1\r\n            break\r\n        case 'ArrowDown':\r\n            if (passes > 1)\r\n                passes /= 2\r\n            else\r\n                passes=0\r\n            break\r\n        case 'ArrowLeft':\r\n            rotation++\r\n            break\r\n        case 'ArrowRight':\r\n            rotation--\r\n            break\r\n        case 'F1':\r\n            alert(`Press SPACE to toggle FPS benchmark\r\nW to toggle wireframe\r\nArrow UP/DOWN to change number of passes\r\nArrow LEFT/RIGHT to rotate\r\n`)\r\n            break\r\n        default:\r\n            //console.log(e)\r\n    }\r\n    if (paused) window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize(canvas: HTMLCanvasElement) {\r\n    const dpr = window.devicePixelRatio;\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n    const displayWidth = Math.round(width * dpr);\r\n    const displayHeight = Math.round(height * dpr);\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width != displayWidth ||\r\n        canvas.height != displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n        gl.viewport(0, 0, displayWidth, displayHeight)\r\n    }\r\n\r\n    return needResize;\r\n}"]}